BÁO CÁO ĐỒ ÁN MÔN HỌC
CÔNG CỤ VÀ MÔI TRƯỜNG PHÁT TRIỂN PHẦN MỀM

Tên dự án: Xây dựng Trang web Ôn thi Trắc nghiệm

CHƯƠNG 1: GIỚI THIỆU TỔNG QUAN

1.1. Bối cảnh và Lý do chọn đề tài
- Nhu cầu thực tế về nền tảng học tập và ôn thi trực tuyến ngày càng tăng
- Áp dụng các công cụ và quy trình chuẩn trong phát triển phần mềm
- Dự án phù hợp để thực hành các kiến thức môn học

1.2. Mục tiêu của Đồ án
- Mục tiêu chức năng:
  + Đăng ký/Đăng nhập người dùng
  + Quản lý tài khoản
  + Chọn và làm bài thi trắc nghiệm
  + Xem kết quả và lịch sử làm bài
  + Quản lý câu hỏi và đề thi (cho admin)

- Mục tiêu phi chức năng:
  + Giao diện thân thiện, dễ sử dụng
  + Hiệu năng ổn định
  + Mã nguồn dễ bảo trì
  + Bảo mật thông tin người dùng

1.3. Công nghệ và Công cụ Sử dụng
- Backend:
  + Node.js với Express.js
  + MongoDB làm cơ sở dữ liệu
  + JWT cho xác thực

- Frontend:
  + Vue.js
  + Axios cho API calls
  + Local Storage cho quản lý state

- Công cụ phát triển:
  + Jira: Quản lý dự án
  + Figma: Thiết kế UI/UX
  + GitHub: Quản lý mã nguồn
  + Selenium: Kiểm thử tự động
  + Cloud/Hosting: Triển khai ứng dụng

1.4. Cấu trúc Dự án
- Frontend:
  + src/
    * components/: Các component Vue.js
    * views/: Các trang chính
    * services/: Các service API
    * router/: Cấu hình routing
    * store/: Quản lý state
    * assets/: Tài nguyên tĩnh
  + public/: File tĩnh
  + package.json: Dependencies và scripts

- Backend:
  + src/
    * controllers/: Xử lý logic
    * models/: Schema MongoDB
    * routes/: Định nghĩa API
    * middleware/: Xử lý trung gian
    * config/: Cấu hình
    * utils/: Tiện ích
  + package.json: Dependencies và scripts

1.5. Dependencies Chính
- Frontend:
  + Vue.js 3.x
  + Vue Router 4.x
  + Vuex 4.x
  + Axios 1.x
  + Vuetify 3.x

- Backend:
  + Node.js 18.x
  + Express.js 4.x
  + MongoDB 6.x
  + Mongoose 7.x
  + JWT 9.x

1.6. Thông tin Hiệu năng
- Thời gian phản hồi API:
  + API đăng nhập: < 500ms
  + API load đề thi: < 1s
  + API submit bài thi: < 800ms

- Khả năng mở rộng:
  + Hỗ trợ tối đa 1000 người dùng đồng thời
  + Tự động scale khi tải cao
  + Caching để tối ưu hiệu năng

- Dung lượng dữ liệu:
  + Database: ~10GB
  + Storage: ~5GB
  + Backup: ~15GB

1.7. Thông tin Bảo mật
- Các biện pháp bảo mật:
  + Mã hóa mật khẩu bằng bcrypt
  + JWT token với thời gian hết hạn
  + HTTPS cho tất cả API
  + CORS policy nghiêm ngặt
  + Rate limiting cho API

- Xử lý dữ liệu nhạy cảm:
  + Không lưu mật khẩu dạng plain text
  + Mã hóa thông tin cá nhân
  + Xóa dữ liệu theo GDPR

- Backup và khôi phục:
  + Backup tự động hàng ngày
  + Lưu trữ backup 30 ngày
  + Test khôi phục hàng tháng

CHƯƠNG 2: QUẢN LÝ DỰ ÁN VỚI JIRA

2.1. Thiết lập Dự án
- Sử dụng Jira để quản lý công việc theo phương pháp Scrum
- Tạo các Epic, User Story và Task tương ứng với các chức năng

2.2. Quản lý Sprint
- Sprint kéo dài 2 tuần
- Sử dụng Sprint Board để theo dõi tiến độ
- Burndown Chart để đánh giá hiệu suất

CHƯƠNG 3: THIẾT KẾ UI/UX VỚI FIGMA

3.1. Thiết kế Wireframe
- Thiết kế các màn hình chính:
  + Trang đăng nhập/đăng ký
  + Trang chủ
  + Trang làm bài thi
  + Trang kết quả
  + Trang quản lý (cho admin)

3.2. Prototype
- Tạo prototype tương tác để kiểm tra luồng người dùng
- Thử nghiệm các tương tác chính

CHƯƠNG 4: QUẢN LÝ MÃ NGUỒN VỚI GITHUB

4.1. Cấu trúc Repository
- Tách biệt frontend và backend
- Sử dụng Gitflow workflow
- Các branch chính:
  + main: Phiên bản ổn định
  + develop: Phát triển
  + feature/*: Tính năng mới
  + hotfix/*: Sửa lỗi khẩn cấp

4.2. Quy trình làm việc
- Code review trước khi merge
- Sử dụng Pull Request
- Commit message theo quy ước

4.3. Quy tắc Phát triển
- Quy tắc đặt tên:
  + Component: PascalCase (VD: UserProfile.vue)
  + File: camelCase (VD: authService.js)
  + Biến: camelCase
  + Hằng số: UPPER_SNAKE_CASE

- Quy tắc commit:
  + feat: Thêm tính năng mới
  + fix: Sửa lỗi
  + docs: Cập nhật tài liệu
  + style: Cập nhật style
  + refactor: Tái cấu trúc code
  + test: Thêm test
  + chore: Cập nhật build tools

- Quy trình làm việc hàng ngày:
  + Pull code mới nhất từ develop
  + Tạo branch feature từ develop
  + Code và commit theo quy tắc
  + Tạo Pull Request
  + Review code
  + Merge vào develop

CHƯƠNG 5: KIỂM THỬ PHẦN MỀM

5.1. Kiểm thử Thủ công
- Test case cho các chức năng chính
- Kiểm tra giao diện người dùng
- Kiểm tra xử lý lỗi

5.2. Kiểm thử Tự động với Selenium
- Tự động hóa các luồng chính
- Kiểm tra API endpoints
- Kiểm tra hiệu năng

5.3. Chi tiết Test Case
- Test case đăng nhập:
  + TC1: Đăng nhập thành công
  + TC2: Sai mật khẩu
  + TC3: Tài khoản không tồn tại
  + TC4: Validate input

- Test case làm bài thi:
  + TC1: Load đề thi thành công
  + TC2: Submit bài thi
  + TC3: Tính điểm
  + TC4: Lưu kết quả

- Test case quản lý câu hỏi:
  + TC1: Thêm câu hỏi
  + TC2: Sửa câu hỏi
  + TC3: Xóa câu hỏi
  + TC4: Import/Export

5.4. Kết quả Kiểm thử
- Số lượng test case: 50
- Tỷ lệ pass: 95%
- Các lỗi chính:
  + Lỗi hiển thị UI trên mobile
  + Lỗi timeout khi submit bài thi
  + Lỗi cache khi refresh trang

CHƯƠNG 6: TRIỂN KHAI ỨNG DỤNG

6.1. Môi trường Triển khai
- Backend: Node.js trên Cloud Server
- Frontend: Vue.js trên Vercel/Netlify
- Database: MongoDB Atlas

6.2. Quy trình Triển khai
- CI/CD pipeline
- Kiểm tra môi trường
- Backup dữ liệu

6.3. Chi tiết Triển khai
- Backend:
  + Cấu hình Node.js trên server
  + Cài đặt PM2 để quản lý process
  + Cấu hình Nginx làm reverse proxy
  + Cấu hình SSL với Let's Encrypt

- Frontend:
  + Build production với npm run build
  + Deploy lên Vercel/Netlify
  + Cấu hình custom domain
  + Cấu hình CDN

- Database:
  + Cấu hình MongoDB Atlas
  + Thiết lập backup tự động
  + Cấu hình monitoring
  + Tối ưu indexes

6.4. Xử lý Sự cố
- Các sự cố thường gặp:
  + Server quá tải
  + Mất kết nối database
  + Lỗi cache
  + Lỗi bảo mật

- Giải pháp:
  + Scale server
  + Retry mechanism
  + Clear cache
  + Update security patches

CHƯƠNG 7: KẾT QUẢ VÀ THẢO LUẬN

7.1. Kết quả Đạt được
- Hoàn thành các chức năng cốt lõi
- Giao diện thân thiện người dùng
- Hiệu năng ổn định

7.2. Bài học Kinh nghiệm
- Quản lý thời gian hiệu quả
- Làm việc nhóm với các công cụ
- Xử lý các vấn đề kỹ thuật

7.3. Đánh giá Hiệu năng và Bảo mật
- Hiệu năng:
  + Đáp ứng tốt với số lượng người dùng lớn
  + Thời gian phản hồi nhanh
  + Tối ưu hóa tốt cho mobile

- Bảo mật:
  + Không có lỗ hổng bảo mật nghiêm trọng
  + Tuân thủ các tiêu chuẩn bảo mật
  + Xử lý tốt các cuộc tấn công phổ biến

CHƯƠNG 8: KẾT LUẬN VÀ HƯỚNG PHÁT TRIỂN

8.1. Kết luận
- Dự án đã đạt được các mục tiêu đề ra
- Áp dụng thành công các công cụ phát triển
- Tích lũy kinh nghiệm thực tế

8.2. Hướng phát triển
- Thêm tính năng thi trắc nghiệm theo thời gian thực
- Cải thiện hệ thống đánh giá và phân tích kết quả
- Tối ưu hóa hiệu năng và trải nghiệm người dùng
- Nâng cấp hệ thống bảo mật
- Thêm tính năng AI để phân tích kết quả học tập
- Tích hợp với các nền tảng học tập khác

TÀI LIỆU THAM KHẢO
1. Vue.js Documentation
2. Node.js Documentation
3. MongoDB Documentation
4. Jira Documentation
5. Figma Documentation
6. Selenium Documentation

PHỤ LỤC

A.1. Tài liệu Hướng dẫn Sử dụng
- Hướng dẫn đăng ký và đăng nhập
- Hướng dẫn làm bài thi
- Hướng dẫn xem kết quả
- Hướng dẫn quản trị viên

A.2. Tài liệu API
- Danh sách API endpoints
- Mẫu request/response
- Các lỗi thường gặp

A.3. Tài liệu Cài đặt và Triển khai
- Yêu cầu hệ thống
- Các bước cài đặt
- Cấu hình môi trường
- Xử lý sự cố thường gặp

A.4. Danh sách Test Case Đầy đủ
- Chi tiết các test case đã thực hiện
- Kết quả kiểm thử
- Các lỗi đã phát hiện và cách khắc phục

A.5. Sơ đồ Kiến trúc Hệ thống
- Sơ đồ tổng quan
- Sơ đồ luồng dữ liệu
- Sơ đồ triển khai 